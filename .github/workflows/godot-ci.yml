name: "godot-ci export"
on:
  tag

env:
  GODOT_VERSION: 3.5
  EXPORT_NAME: FunCryAgar

jobs:
  export-windows:
    name: Windows Export ü™ü
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:3.5
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Windows Build 64
        run: |
          mkdir -v -p build/windows64
          cd $EXPORT_NAME
          godot -v --export "Windows Desktop 64" ../build/windows64/$EXPORT_NAME.exe
      - name: Windows Build 32
        run: |
          mkdir -v -p build/windows32
          cd $EXPORT_NAME
          godot -v --export "Windows Desktop 32" ../build/windows32/$EXPORT_NAME.exe
      - name: Upload Artifact 64
        uses: actions/upload-artifact@v1
        with:
          name: windows64
          path: build/windows64
      - name: Upload Artifact 32
        uses: actions/upload-artifact@v1
        with:
          name: windows32
          path: build/windows32


  export-linux:
    name: Linux Export üêß
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:3.5
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Linux Build
        run: |
          mkdir -v -p build/linux
          cd $EXPORT_NAME
          godot -v --export "Linux/X11" ../build/linux/$EXPORT_NAME.x86_64
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: linux
          path: build/linux

  export-web:
    name: Web Export üåê
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:3.5
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Web Build
        run: |
          mkdir -v -p build/web
          cd $EXPORT_NAME
          godot -v --export "HTML5" ../build/web/index.html
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: web
          path: build/web
      - name: Install rsync üìö
        run: |
          apt-get update && apt-get install -y rsync
      - name: Deploy to GitHub Pages üöÄ
        uses: JamesIves/github-pages-deploy-action@v4.3.3
        with:
          branch: gh-pages # The branch the action should deploy to.
          folder: build/web # The folder the action should deploy.

  export-mac:
    name: Mac Export üçé
    runs-on: ubuntu-20.04
    container:
      image: barichello/godot-ci:3.5
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Setup
        run: |
          mkdir -v -p ~/.local/share/godot/templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable ~/.local/share/godot/templates/${GODOT_VERSION}.stable
      - name: Mac Build
        run: |
          mkdir -v -p build/mac
          cd $EXPORT_NAME
          godot -v --export "Mac OSX" ../build/mac/$EXPORT_NAME.zip
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: mac
          path: build/mac

  release:
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    name: Release builds
    needs: [export-windows, export-linux, export-mac]
    runs-on: ubuntu-latest
    steps:
      - name: Download builds
        uses: actions/download-artifact@v2

      - name: Compress
        shell: bash
        run: for build in {mac,linux,windows64,windows32}; do zip -r $build $build; done

      - name: upload
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            linux.zip
            mac.zip
            windows64.zip
            windows32.zip
